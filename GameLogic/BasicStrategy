import random


card_values = {
    '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
    'J': 10, 'Q': 10, 'K': 10, 'A': 11
}


def create_deck(num_decks=2):
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    ranks = list(card_values.keys())
    deck = [f'{rank} of {suit}' for suit in suits for rank in ranks]
    return deck * num_decks


def shuffle_deck(deck):
    random.shuffle(deck)
    return deck


def deal_card(deck):
    return deck.pop()


def hand_value(hand):
    value = 0
    ace_count = 0
    for card in hand:
        rank = card.split()[0]
        value += card_values[rank]
        if rank == 'A':
            ace_count += 1
    while value > 21 and ace_count:
        value -= 10
        ace_count -= 1
    return value


def is_soft_hand(hand):
    return 'A' in [card.split()[0] for card in hand] and hand_value(hand) <= 21


def card_to_str(card):
    rank, suit = card.split(' of ')
    suit_symbols = {
        'Hearts': '♥',
        'Diamonds': '♦',
        'Clubs': '♣',
        'Spades': '♠'
    }
    return f"{rank:<2}{suit_symbols[suit]}"


def print_hand(player, hand, hide_first_card=False):
    rows = ['', '', '', '', '']
    card_strs = []

    if hide_first_card:
        card_strs = [card_to_str(hand[0])]  
        rows[0] += "+------+"  
        rows[1] += f"|{card_to_str(hand[0])}   |"  
        rows[2] += "|      |"  
        rows[3] += "|      |"  
        rows[4] += "+------+"  
        rows[0] += "+------+"  
        rows[1] += "|Hidden| "  
        rows[2] += "|      |"  
        rows[3] += "|      |"  
        rows[4] += "+------+"  
    else:
        card_strs = [card_to_str(card) for card in hand]
        for card_str in card_strs:
            rows[0] += "+------+"  
            rows[1] += f"|{card_str}   |"  
            rows[2] += "|      |"  
            rows[3] += "|      |"
            rows[4] += "+------+"  
    
    print(f"{player}'s hand:")
    print("\n".join(rows))
    
    if hide_first_card:
        print(f"{player}'s hand: {card_to_str(hand[0])} [Hidden]")
    else:
        print(f"{player}'s hand: {', '.join(card_strs)} (Value: {hand_value(hand)})")


def dealer_turn(deck, hand):
    while hand_value(hand) < 17:
        hand.append(deal_card(deck))
    return hand


def basic_strategy(player_total, dealer_value, soft):
    """ This is a simple implementation of Blackjack's
        basic strategy. It is used to recommend actions
        for the player. """

    if 4 <= player_total <= 8:
        return 'hit'
    if player_total == 9:
        if dealer_value in [1,2,7,8,9,10]:
            return 'hit'
        return 'double'
    if player_total == 10:
        if dealer_value in [1, 10]:
            return 'hit'
        return 'double'
    if player_total == 11:
        if dealer_value == 1:
            return 'hit'
        return 'double'
    if soft:
        if player_total in [12, 13, 14]:
            if dealer_value in [5, 6]:
                return 'double'
            return 'hit'
        if player_total in [15, 16]:
            if dealer_value in [4, 5, 6]:
                return 'double'
            return 'hit'
        if player_total == 17:
            if dealer_value in [3, 4, 5, 6]:
                return 'double'
            return 'hit'
        if player_total == 18:
            if dealer_value in [3, 4, 5, 6]:
                return 'double'
            if dealer_value in [2, 7, 8]:
                return 'stand'
            return 'hit'
        if player_total >= 19:
            return 'stand'
    else:
        if player_total == 12:
            if dealer_value in [1, 2, 3, 7, 8, 9, 10]:
                return 'hit'
            return 'stand'
        if player_total in [13, 14, 15, 16]:
            if dealer_value in [2, 3, 4, 5, 6]:
                return 'stand'
            return 'hit'
        if player_total >= 17:
            return 'stand'

def player_turn(deck, hand, dealer_hand):
    dealer_card = dealer_hand[0]
    
    while True:
        player_total = hand_value(hand)
        dealer_value = card_values[dealer_card.split()[0]]
        soft = is_soft_hand(hand)
        
        recommended_action = basic_strategy(player_total, dealer_value, soft)

        action = input("Do you want to 'hit', 'stand', or 'double'? ").lower()

        if action == 'hit':
            hand.append(deal_card(deck))
        elif action == 'double':
            hand.append(deal_card(deck))
            feedback = 'Correct' if recommended_action == 'double' else f"Incorrect. The correct action was to {recommended_action}."
            print(f"\nYour choice to double was {feedback}.")
            break  
        elif action == 'stand':
            feedback = 'Correct' if recommended_action == 'stand' else f"Incorrect. The correct action was to {recommended_action}."
            print(f"\nYour choice to stand was {feedback}.")
            break
        else:
            print("\nInvalid action. Please choose 'hit', 'stand', or 'double'.")
            continue
        

        print("\nDealer's hand:")
        print_hand('Dealer', dealer_hand, hide_first_card=True)
        print("\nPlayer's hand:")
        print_hand('Player', hand)
        

        print("\n" + "-"*40 + "\n")

        if hand_value(hand) > 21:
            print("Player busts! Dealer wins.")
            return 'bust'  
        
        feedback = 'Correct' if action == recommended_action else f"Incorrect. The correct action was to {recommended_action}."
        print(f"Your choice to {action} was {feedback}.")


def handle_split(deck, hand, dealer_hand):
    if len(hand) == 2:
        card1_rank = hand[0].split()[0]
        card2_rank = hand[1].split()[0]
        

        if card1_rank == card2_rank or (card_values[card1_rank] == 10 and card_values[card2_rank] == 10):
            while True:
                split_decision = input("Do you want to split? Type 'yes' or 'no': ").lower()
                if split_decision == 'yes':
                    hand1 = [hand.pop(0), deal_card(deck)]
                    hand2 = [hand.pop(0), deal_card(deck)]
                    print("\nSplitting hands:")
                    print_hand('Player Hand 1', hand1)
                    print_hand('Player Hand 2', hand2)
                    

                    result1 = player_turn(deck, hand1, dealer_hand)
                    result2 = player_turn(deck, hand2, dealer_hand)
                    return [hand1, hand2], result1, result2
                elif split_decision == 'no':
                    return [hand], 'continue', 'continue'
                else:
                    print("Invalid choice. Please choose 'yes' or 'no'.")
        else:
            return [hand], 'continue', 'continue'

def play_blackjack():
    while True:
        deck = create_deck(num_decks=2)  
        shuffle_deck(deck)
        
        player_hand = [deal_card(deck), deal_card(deck)]
        dealer_hand = [deal_card(deck), deal_card(deck)]
        
        print_hand('Dealer', dealer_hand, hide_first_card=True)
        print_hand('Player', player_hand)
        
        hands_to_play, result1, result2 = handle_split(deck, player_hand, dealer_hand)
        
        game_ongoing = True
        for hand, result in zip(hands_to_play, [result1, result2]):
            if result == 'bust':
                game_ongoing = False
                break
            player_turn(deck, hand, dealer_hand)
        
        if game_ongoing:
            print("\nDealer's turn:")
            dealer_hand = dealer_turn(deck, dealer_hand)
        
        print("\nFinal hands:")
        print_hand('Dealer', dealer_hand)
        for hand in hands_to_play:
            print_hand('Player', hand)
            print("\n" + "-"*40 + "\n")

        dealer_score = hand_value(dealer_hand)
        
        for hand, result in zip(hands_to_play, [result1, result2]):
            player_score = hand_value(hand)
            
            if dealer_score == 21:
                print("Dealer has 21! Dealer wins.")
            elif player_score > 21:
                print("Player busts! Dealer wins.")
            elif player_score == 21:
                if dealer_score == 21:
                    print("Push! Both dealer and player have 21.")
                else:
                    print("Player wins with 21!")
            elif dealer_score > 21:
                print("Dealer busts! Player wins.")
            elif player_score > dealer_score:
                print("Player wins!")
            elif player_score < dealer_score:
                print("Dealer wins!")
            else:
                print("It's a tie!")

        play_again = input("Do you want to play again? (yes/no): ").lower()
        if play_again != 'yes':
            break

if __name__ == "__main__":
    play_blackjack()

